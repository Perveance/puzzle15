package mszhidko.games.puzzle15;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

public class Solver {

	private class Node  implements Comparable<Node> {
		public Board node;
		
		public Node(Board b) {
			node = b;
		}
		
		public int hashCode()
        {
        	return node.toString().hashCode();
        }
		
		@Override
		public int compareTo(Node o) {
			
			if (node.manhattan() < o.node.manhattan()) {
				return -1;
			} else if (this.node.manhattan() > o.node.manhattan()) {
				return 1;
			}
			
			return 0;
		}
	}
	
	private MinPQ<Node> boards = new MinPQ<Node>();
	private boolean isSolvable = false;
	private List<Board> solution = new LinkedList<Board>();
	private List<Board> set = new LinkedList<Board>();
	private int optimalMoves = 0;
	private int N = 0;
	
	// find a solution to the initial board (using the A* algorithm)
    public Solver(Board initial) {
    
    	if (initial == null)
    		return;
    	
    	this.N = initial.dimension();
    	
    	boards.insert(new Node(initial));
    	
    	//Set<Node> boardsSet = new HashSet<Node>();
    	//boardsSet.add(new Node(initial));
    	set.add(initial);
    	 
    	int i = 0;
    	while (true) {
    		if (boards.isEmpty()) {
    			break;
    		}
    		Board m = boards.delMin().node;
    		
    		solution.add(m);
    	    
    		if (m.isGoal()) {
    			isSolvable = true;
    			break;
    		}
    		
    		optimalMoves++;
    		Iterable<Board> l = m.neighbors();
    	    for (Board b : l) {
    	    	boolean isNew = true;
    	    	//if (boardsSet.add(new Node(b))) {
    	    	//	boards.insert(new Node(b));
    	    	//}
    	    	for (Board b_in_set : set) {
    	    		if (b_in_set.equals(b)) {
    	    			isNew = false;
    	    			break;
    	    		}
    	    	}
    	    	if (isNew) {
    	    		set.add(b);
    	    		boards.insert(new Node(b));
    	    	}
    	    }
    	    
    	    if (i++ > N*N*N*N*N) {
    	    	break;
    	    }
    	    
    	}
    	
    	if (!isSolvable()) {
    		optimalMoves = -1;
    	}
    }
    
    // is the initial board solvable?
    public boolean isSolvable() {
    	return isSolvable;
    }
    
    // min number of moves to solve initial board; -1 if no solution
    public int moves() {
    	return optimalMoves;
    }
    
    // 	sequence of boards in a shortest solution; null if no solution
    public Iterable<Board> solution() {
    	return (isSolvable) ? solution : null;
    }
    /*
	public static void main(String[] args) {
		
		// TODO Auto-generated method stub
		// create initial board from file
	    In in = new In(args[0]);
	    int N = in.readInt();
	    int[][] blocks = new int[N][N];
	    for (int i = 0; i < N; i++)
	        for (int j = 0; j < N; j++)
	            blocks[i][j] = in.readInt();
	    Board initial = new Board(blocks);

	    // solve the puzzle
	    Solver solver = new Solver(initial);

	    // print solution to standard output
	    if (!solver.isSolvable()) {
	        StdOut.println("No solution possible");
	    } else {
	        StdOut.println("Minimum number of moves = " + solver.moves() + "\n");
	        for (Board board : solver.solution())
	            StdOut.println(board);
	    }
	}
	*/

}
